import React, { useState } from 'react';
import {
  Clock,
  Star,
  MoreVertical,
  CheckSquare,
  Archive,
  Trash2,
  Tag,
  Target,
  TrendingUp,
  AlertCircle,
  Calendar
} from 'lucide-react';
import { Task } from '../types';
import { useApp } from '../context/AppContext';
import { formatDistanceToNow, differenceInDays, differenceInHours } from 'date-fns';
import { zhCN } from 'date-fns/locale';

interface TaskItemProps {
  task: Task;
  onEdit?: (task: Task) => void;
}

export const TaskItem: React.FC<TaskItemProps> = ({ task, onEdit }) => {
  const { state, dispatch } = useApp();
  const [isMenuOpen, setIsMenuOpen] = useState(false);

  const isSelected = state.selectedTasks.has(task.id);
  const category = state.categories.find(cat => cat.id === task.category);

  const handleToggleComplete = () => {
    dispatch({ type: 'TOGGLE_TASK_COMPLETION', payload: task.id });
  };

  const handleToggleStar = () => {
    dispatch({ type: 'TOGGLE_TASK_STAR', payload: task.id });
  };

  const handleDelete = () => {
    if (window.confirm('确定要删除这个任务吗？')) {
      dispatch({ type: 'DELETE_TASK', payload: task.id });
    }
  };

  const handleArchive = () => {
    dispatch({ type: 'ARCHIVE_TASK', payload: task.id });
  };

  const handleSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.checked) {
      dispatch({ type: 'SELECT_TASK', payload: task.id });
    } else {
      dispatch({ type: 'DESELECT_TASK', payload: task.id });
    }
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'high': return 'border-error';
      case 'medium': return 'border-info';
      case 'low': return 'border-success';
      default: return 'border-base-300';
    }
  };

  // Calculate deadline progress and status
  const getDeadlineProgress = () => {
    if (!task.deadline) return null;

    const now = new Date();
    const deadline = new Date(task.deadline);
    const created = new Date(task.createdAt);

    const totalTime = deadline.getTime() - created.getTime();
    const elapsedTime = now.getTime() - created.getTime();
    const remainingTime = deadline.getTime() - now.getTime();

    const progressPercentage = Math.max(0, Math.min(100, (elapsedTime / totalTime) * 100));
    const daysRemaining = differenceInDays(deadline, now);
    const hoursRemaining = differenceInHours(deadline, now);

    let status = 'normal';
    let statusColor = '#10b981'; // success green
    let statusText = '';

    if (remainingTime < 0) {
      status = 'overdue';
      statusColor = '#ef4444'; // error red
      statusText = '已逾期';
    } else if (daysRemaining === 0) {
      status = 'urgent';
      statusColor = '#f97316'; // orange
      statusText = hoursRemaining <= 12 ? `${hoursRemaining}小时后截止` : '今天截止';
    } else if (daysRemaining === 1) {
      status = 'warning';
      statusColor = '#eab308'; // warning yellow
      statusText = '明天截止';
    } else if (daysRemaining <= 3) {
      status = 'caution';
      statusColor = '#3b82f6'; // info blue
      statusText = `${daysRemaining}天后截止`;
    } else {
      status = 'normal';
      statusColor = '#10b981'; // success green
      statusText = formatDistanceToNow(deadline, { locale: zhCN, addSuffix: true });
    }

    return {
      progress: progressPercentage,
      status,
      statusColor,
      statusText,
      daysRemaining,
      isOverdue: remainingTime < 0
    };
  };

  const deadlineProgress = getDeadlineProgress();

  return (
    <div
      className={`task-item card bg-base-100 border-l-4 ${getPriorityColor(task.priority)} p-4 mb-3 transition-all cursor-pointer ${
        task.completed ? 'opacity-60' : ''
      } ${isSelected ? 'ring-2 ring-primary' : ''}`}
      data-task-id={task.id}
      data-type={task.type}
      data-category={task.category}
      data-priority={task.priority}
      style={{
        borderRadius: '8px',
        boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
        border: `1px solid #e2e8f0`,
        borderLeft: `4px solid ${
          task.priority === 'high' ? '#ef4444' :
          task.priority === 'medium' ? '#3b82f6' : '#22c55e'
        }`
      }}
    >
      <div className="flex items-start gap-3">
        {/* Checkbox for multi-select */}
        {state.isMultiSelectMode && (
          <input
            type="checkbox"
            className="task-checkbox checkbox mt-1"
            checked={isSelected}
            onChange={handleSelect}
            data-task-id={task.id}
            style={{
              width: '18px',
              height: '18px',
              accentColor: '#10b981'
            }}
          />
        )}

        {/* Task completion checkbox */}
        <button
          onClick={handleToggleComplete}
          className={`flex-shrink-0 mt-1 ${
            task.completed
              ? 'text-success'
              : 'hover:text-primary'
          } transition-all`}
          style={{
            padding: '4px',
            borderRadius: '4px',
            border: 'none',
            background: 'transparent'
          }}
        >
          <CheckSquare
            size={20}
            style={{
              fill: task.completed ? 'currentColor' : 'none',
              stroke: task.completed ? '#22c55e' : '#94a3b8',
              strokeWidth: 2
            }}
          />
        </button>

        {/* Main content */}
        <div className="flex-1">
          <div className="flex items-start justify-between mb-3">
            <div className="flex-1">
              <h3
                className={`font-medium text-base ${
                  task.completed ? 'line-through opacity-60' : ''
                }`}
                style={{
                  textDecoration: task.completed ? 'line-through' : 'none',
                  color: task.completed ? '#64748b' : '#0f172a'
                }}
              >
                {task.title}
              </h3>
              {task.description && (
                <p className="text-sm opacity-60 mt-1 line-clamp-2">
                  {task.description}
                </p>
              )}
            </div>

            {/* Actions */}
            <div className="flex items-center gap-1 ml-3">
              <button
                onClick={handleToggleStar}
                className={`btn btn-ghost btn-xs ${
                  task.isStarred ? 'text-warning' : 'opacity-40'
                }`}
                style={{
                  padding: '6px',
                  borderRadius: '6px',
                  minHeight: 'auto',
                  height: 'auto'
                }}
              >
                <Star size={14} style={{ fill: task.isStarred ? '#fbbf24' : 'none' }} />
              </button>

              <div className="dropdown dropdown-end">
                <button
                  className="btn btn-ghost btn-xs opacity-40 hover:opacity-100"
                  onClick={() => setIsMenuOpen(!isMenuOpen)}
                  style={{
                    padding: '6px',
                    borderRadius: '6px',
                    minHeight: 'auto',
                    height: 'auto'
                  }}
                >
                  <MoreVertical size={14} />
                </button>
                {isMenuOpen && (
                  <ul
                    className="dropdown-content menu shadow-lg bg-base-100 border border-base-300 z-10"
                    style={{
                      borderRadius: '8px',
                      minWidth: '12rem',
                      position: 'absolute',
                      top: '100%',
                      right: 0,
                      marginTop: '0.5rem',
                      visibility: 'visible',
                      opacity: 1,
                      boxShadow: '0 4px 20px rgba(0,0,0,0.15)'
                    }}
                    onMouseLeave={() => setIsMenuOpen(false)}
                  >
                    <li>
                      <button
                        onClick={() => { onEdit?.(task); setIsMenuOpen(false); }}
                        className="flex items-center gap-2"
                        style={{ padding: '8px 12px', borderRadius: '4px' }}
                      >
                        <Target size={14} />
                        编辑
                      </button>
                    </li>
                    <li>
                      <button
                        onClick={() => { handleArchive(); setIsMenuOpen(false); }}
                        className="flex items-center gap-2"
                        style={{ padding: '8px 12px', borderRadius: '4px' }}
                      >
                        <Archive size={14} />
                        存档
                      </button>
                    </li>
                    <div className="divider" style={{ margin: '4px 0' }}></div>
                    <li>
                      <button
                        onClick={() => { handleDelete(); setIsMenuOpen(false); }}
                        className="flex items-center gap-2 text-error"
                        style={{ padding: '8px 12px', borderRadius: '4px' }}
                      >
                        <Trash2 size={14} />
                        删除
                      </button>
                    </li>
                  </ul>
                )}
              </div>
            </div>
          </div>

          {/* Deadline Progress Bar */}
          {task.type === 'task' && deadlineProgress && (
            <div className="mb-3">
              <div className="flex items-center justify-between mb-1">
                <div className="flex items-center gap-2">
                  <Calendar size={12} style={{ color: deadlineProgress.statusColor }} />
                  <span
                    className="text-xs font-medium"
                    style={{ color: deadlineProgress.statusColor }}
                  >
                    {deadlineProgress.statusText}
                  </span>
                  {deadlineProgress.isOverdue && (
                    <AlertCircle size={12} className="text-error" />
                  )}
                </div>
                <span className="text-xs opacity-60">
                  {Math.round(deadlineProgress.progress)}%
                </span>
              </div>

              <div
                className="w-full h-2 bg-base-300 overflow-hidden"
                style={{ borderRadius: '4px' }}
              >
                <div
                  className="h-full transition-all duration-500 ease-out"
                  style={{
                    width: `${deadlineProgress.progress}%`,
                    backgroundColor: deadlineProgress.statusColor,
                    borderRadius: '4px',
                    boxShadow: deadlineProgress.isOverdue ?
                      `0 0 8px ${deadlineProgress.statusColor}40` : 'none'
                  }}
                ></div>
              </div>
            </div>
          )}

          {/* Meta information */}
          <div className="flex items-center gap-4 text-xs opacity-60 flex-wrap">
            {/* Category */}
            {category && (
              <div
                className="flex items-center gap-1 px-2 py-1"
                style={{
                  backgroundColor: `${category.color}20`,
                  borderRadius: '12px',
                  border: `1px solid ${category.color}40`
                }}
              >
                <div
                  className="w-2 h-2 rounded-full"
                  style={{ backgroundColor: category.color }}
                ></div>
                <span style={{ color: category.color, fontWeight: 500 }}>{category.name}</span>
              </div>
            )}

            {/* Task type */}
            <div
              className="flex items-center gap-1 px-2 py-1"
              style={{
                backgroundColor: task.type === 'habit' ? '#8b5cf620' : '#3b82f620',
                borderRadius: '12px',
                border: `1px solid ${task.type === 'habit' ? '#8b5cf640' : '#3b82f640'}`
              }}
            >
              {task.type === 'habit' ? (
                <TrendingUp size={12} style={{ color: '#8b5cf6' }} />
              ) : (
                <Target size={12} style={{ color: '#3b82f6' }} />
              )}
              <span style={{ color: task.type === 'habit' ? '#8b5cf6' : '#3b82f6', fontWeight: 500 }}>
                {task.type === 'habit' ? '习惯' : '任务'}
              </span>
            </div>

            {/* Habit progress */}
            {task.type === 'habit' && task.progress !== undefined && (
              <div className="flex items-center gap-2">
                <span className="text-xs">进度:</span>
                <div
                  className="w-16 h-2 bg-base-300 overflow-hidden"
                  style={{ borderRadius: '4px' }}
                >
                  <div
                    className="h-full bg-primary transition-all duration-300"
                    style={{
                      width: `${task.progress}%`,
                      borderRadius: '4px',
                      backgroundColor: '#10b981'
                    }}
                  ></div>
                </div>
                <span className="text-xs font-medium text-primary">{task.progress}%</span>
              </div>
            )}

            {/* Habit streak */}
            {task.type === 'habit' && task.streak && (
              <div
                className="flex items-center gap-1 px-2 py-1"
                style={{
                  backgroundColor: '#22c55e20',
                  borderRadius: '12px',
                  border: '1px solid #22c55e40'
                }}
              >
                <span>🔥</span>
                <span style={{ color: '#22c55e', fontWeight: 500 }}>{task.streak}天连续</span>
              </div>
            )}
          </div>

          {/* Tags */}
          {task.tags.length > 0 && (
            <div className="flex items-center gap-2 mt-3 flex-wrap">
              <Tag size={12} className="opacity-40" />
              {task.tags.map((tag, index) => (
                <span
                  key={index}
                  className="px-2 py-1 text-xs"
                  style={{
                    backgroundColor: '#f1f5f9',
                    border: '1px solid #e2e8f0',
                    borderRadius: '12px',
                    color: '#475569',
                    fontWeight: 500
                  }}
                >
                  {tag}
                </span>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};